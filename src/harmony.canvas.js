/** * @author Piotr Cholewczuk * @licence MIT * * Date: Jun 06 2012 * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */(function(Harmony, Kinetic, undefined) {    function xy(x, y) {        return new Harmony.Pos(x, y);    }    function glyph(path, pos) {        var pos = Harmony.merge(xy(0, 0), pos);        var style = Harmony.merge(Harmony.style.glyph);        var scale = Harmony.style.font.scale;        return new Kinetic.Shape({            drawFunc : function() {                var context = this.getContext();                context.moveTo(pos.x, pos.y);                context.globalAlpha = style.globalAlpha;                context.fillStyle = this.parent.__getColor();                context.beginPath();                var x = pos.x;                var y = pos.y;                for(var i = 0; i < path.length; ) {                    var action = path[i++];                    switch (action) {                        case 'm':                            context.moveTo(x + path[i++] * scale, y + path[i++] * -scale);                            break;                        case 'l':                            context.lineTo(x + path[i++] * scale, y + path[i++] * -scale);                            break;                        case 'q':                            var cpx = x + path[i++] * scale;                            var cpy = y + path[i++] * -scale;                            context.quadraticCurveTo(x + path[i++] * scale, y + path[i++] * -scale, cpx, cpy);                            break;                        case 'b':                            var cpx = x + path[i++] * scale;                            var cpy = y + path[i++] * -scale;                            context.bezierCurveTo(x + path[i++] * scale, y + path[i++] * -scale, x + path[i++] * scale, y + path[i++] * -scale, cpx, cpy);                            break;                    }                }                context.fill();                context.closePath();            }        });    }    function line(from, vector, style) {        var from = Harmony.merge(xy(0, 0), from);        var vector = Harmony.merge(xy(0, 0), vector);        var style = Harmony.style.line;        return new Kinetic.Shape({            drawFunc : function() {                var context = this.getContext();                context.globalAlpha = style.globalAplha;                context.strokeStyle = this.parent.__getColor();                context.lineWidth = style.lineWidth;                context.beginPath();                context.moveTo(from.x, from.y);                context.lineTo(from.x + vector.x, from.y + vector.y);                context.stroke();            }        });    }    function text(content) {        var style = Harmony.style.text;        return new Kinetic.Text({            text : content,            fontFamily : style.fontFamily,            fontSize : style.fontSize,            padding : style.padding,            textFill : style.textFill,            fill : style.fill,        });    }    function group(shapes) {        var pos = Harmony.merge(xy(0, 0), pos);        var color = Harmony.style.group.color;        var group = new Kinetic.Group({            __color : color,            __select : false,            __hover : false,            __getColor : function() {                if(this.__focus) {                    return Harmony.style.group.focus;                } else if(this.__hover) {                    return Harmony.style.group.hover;                } else {                    return Harmony.style.group.color;                }            },            __fillText : function() {                for(var i = 0; i < this.children.length; ++i) {                    if(this.__focus) {                        this.children[i].textFill = Harmony.style.group.focus;                    } else if(this.__hover) {                        this.children[i].textFill = Harmony.style.group.hover;                    } else {                        this.children[i].textFill = Harmony.style.group.color;                    }                }            }        });        for(var i = 0; i < shapes.length; ++i) {            group.add(shapes[i]);        }        return group;    }    function func(name, bottom, leftTop, rightTop, rightBottom) {        var shapes = [];        shapes.push(text(name));        if(bottom) {            var bottomShape = text(bottom);            bottomShape.setScale(0.5, 0.5);            bottomShape.move(5 * Harmony.config.scale, Harmony.style.text.fontSize * 1.4);            shapes.push(bottomShape);        }        if(leftTop) {            var leftTopShape = text(leftTop);            leftTopShape.setScale(0.6, 0.6);            leftTopShape.move(-Harmony.style.text.fontSize * 0.7, -6 * Harmony.config.scale);            shapes.push(leftTopShape);        }        if(rightTop) {            var rightTopShape = text(rightTop);            rightTopShape.setScale(0.5, 0.5);            rightTopShape.move(Harmony.style.text.fontSize, -2 * Harmony.config.scale);            shapes.push(rightTopShape);        }        if(rightBottom) {            var rightBottomShape = text(rightBottom);            rightBottomShape.setScale(0.5, 0.5);            rightBottomShape.move(Harmony.style.text.fontSize, Harmony.style.text.fontSize - 6 * Harmony.config.scale);            shapes.push(rightBottomShape);        }                return group(shapes);    }    function merge(groups) {        var color = Harmony.style.group.color;        var group = new Kinetic.Group({            __color : color,            __select : false,            __hover : false,            __getColor : function() {                if(this.__focus) {                    return Harmony.style.group.focus;                } else if(this.__hover) {                    return Harmony.style.group.hover;                } else {                    return Harmony.style.group.color;                }            },            __fillText : function() {                for(var i = 0; i < this.children.length; ++i) {                    if(this.__focus) {                        this.children[i].textFill = Harmony.style.group.focus;                    } else if(this.__hover) {                        this.children[i].textFill = Harmony.style.group.hover;                    } else {                        this.children[i].textFill = Harmony.style.group.color;                    }                }            }        });        for(var i = 0; i < groups.length; ++i) {            if(groups[i]) {                var shapes = groups[i].children;                for(var j = 0; j < shapes.length; ++j) {                    var shape = shapes[j];                    if(shape) {                        group.add(shape);                    }                }            }        }        return group;    }    function moveShapes(group, pos) {        if(group && group.children && pos) {            for(var i = 0; i < group.children.length; ++i) {                var shape = group.children[i];                if(shape) {                    shape.move(pos.x, pos.y);                }            }        }    }    var Canvas = function Canvas() {        this.stage = undefined;        this.initialized = false;        this.layers = {};    };    Harmony.extend(Canvas, Harmony.Obj);    Canvas.prototype.init = function() {        this.stage = new Kinetic.Stage({            container : Harmony.config.container,            width : Harmony.Score.score.size.total().x,            height : Harmony.Score.score.size.total().y,        });        $("#Harmony").css('width', Harmony.Score.score.size.total().x);        $("#Harmony").css('height', Harmony.Score.score.size.total().y);        for(var p in this.layers) {            if(this.layers.hasOwnProperty(p)) {                this.stage.add(this.layers[p]);            }        }    };    Canvas.prototype.addLayer = function(name) {        this.layers[name] = new Kinetic.Layer();    };    Canvas.prototype.addGroup = function(layer, group, pos) {        var pos = pos || new Harmony.Pos(0, 0);        group.move(pos.x, pos.y);        this.layers[layer].add(group);    };    Canvas.prototype.refresh = function(layer) {        var layers = layers || this.layers;        for(var p in layers) {            if(this.layers.hasOwnProperty(p)) {                this.layers[p].draw();            }        }    };    Canvas.prototype.resize = function() {        $("#Harmony").css('width', Harmony.Score.score.size.total().x);        $("#Harmony").css('height', Harmony.Score.score.size.total().y);        this.stage.setSize(Harmony.Score.score.size.total().x, Harmony.Score.score.size.total().y);    };    Canvas.prototype.clear = function() {        if(!this.initialized) {            this.init();            this.initialized = true;        }        for(var p in this.layers) {            if(this.layers.hasOwnProperty(p)) {                this.layers[p].removeChildren();            }        }    };    Canvas.prototype.draw = function() {        if(!this.initialized) {            this.init();            this.initialized = true;        }        for(var p in this.layers) {            if(this.layers.hasOwnProperty(p)) {                this.layers[p].draw();            }        }    };    function margin() {        return xy(Harmony.style.group.margin, 0);    };    function lines(i) {        var i = i || 0;        return -Harmony.style.lines.space * i;    }    function sounds(i) {        var i = i || 0;        return lines(i) / 2;    }    Harmony.Canvas = {        canvas : new Canvas(),        merge : merge,        moveShapes : moveShapes,        lines : lines,        margin : margin,        text : function(content) {            return group([text(content)]);        },        accidental : {            doubleFlat : function() {                return group([glyph(Harmony.Glyph.accidental.doubleFlat, margin().addX(-Harmony.style.accidental.size))]);            },            flat : function() {                return group([glyph(Harmony.Glyph.accidental.flat, margin().addX(-Harmony.style.accidental.size))]);            },            natural : function() {                return group([glyph(Harmony.Glyph.accidental.natural, margin().addX(-Harmony.style.accidental.size))]);            },            hash : function() {                return group([glyph(Harmony.Glyph.accidental.hash, margin().addX(-Harmony.style.accidental.size))]);            },            doubleHash : function() {                return group([glyph(Harmony.Glyph.accidental.doubleHash, margin().addX(-Harmony.style.accidental.size))]);            }        },        addedLines : {            up : function(count) {                if(count % 2 === 0) {                    var y = 0;                } else {                    var y = lines(0.5);                }                var size = Harmony.style.addedLine.size;                var count = parseInt(count / 2);                return group((function(count) {                    var shapes = [];                    for(var i = 0; i < count; ++i) {                        shapes.push(line(margin().add(xy((-size + Harmony.style.note.size) / 2, -y + lines(-i))), xy(size, 0)));                    }                    return shapes;                })(count));            },            down : function(count) {                if(count % 2 === 0) {                    var y = 0;                } else {                    var y = lines(-0.5);                }                var size = Harmony.style.addedLine.size;                var count = parseInt(count / 2);                return group((function(count) {                    var shapes = [];                    for(var i = 0; i < count; ++i) {                        shapes.push(line(margin().add(xy((-size + Harmony.style.note.size) / 2, -y + lines(+i))), xy(size, 0)));                    }                    return shapes;                })(count));            }        },        bar : {            single : function single() {                return group([line(xy(), xy(0, lines(4)))]);            },            end : function double(color) {                return group([line(xy(), xy(0, lines(4))), line(xy(-Harmony.style.line.lineWidth * 2, 0), xy(0, lines(4)))]);            }        },        clef : {            accidentals : {                treble : {                    hash : function(count) {                        var accidentals = [//                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 0, sounds(8))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 1, sounds(5))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 2, sounds(9))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 3, sounds(6))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 4, sounds(3))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 5, sounds(7))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 6, sounds(4)))];                        var shapes = [];                        for(var i = 0; i < count && i < accidentals.length; ++i) {                            shapes.push(accidentals[i]);                        }                        return group(shapes);                    },                    flat : function(count) {                        var accidentals = [//                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 0, sounds(4))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 1, sounds(7))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 2, sounds(3))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 3, sounds(6))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 4, sounds(2))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 5, sounds(5))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 6, sounds(1)))];                        var shapes = [];                        for(var i = 0; i < count && i < accidentals.length; ++i) {                            shapes.push(accidentals[i]);                        }                        return group(shapes);                    }                },                bass : {                    hash : function(count) {                        var accidentals = [//                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 0, sounds(6))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 1, sounds(3))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 2, sounds(7))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 3, sounds(4))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 4, sounds(1))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 5, sounds(5))), //                        glyph(Harmony.Glyph.accidental.hash, xy(Harmony.style.accidental.size * 6, sounds(2)))];                        var shapes = [];                        for(var i = 0; i < count && i < accidentals.length; ++i) {                            shapes.push(accidentals[i]);                        }                        return group(shapes);                    },                    flat : function(count) {                        var accidentals = [//                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 0, sounds(2))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 1, sounds(5))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 2, sounds(1))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 3, sounds(4))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 4, sounds(0))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 5, sounds(3))), //                        glyph(Harmony.Glyph.accidental.flat, xy(Harmony.style.accidental.size * 6, sounds(-1)))];                        var shapes = [];                        for(var i = 0; i < count && i < accidentals.length; ++i) {                            shapes.push(accidentals[i]);                        }                        return group(shapes);                    }                }            },            treble : function() {                return group([glyph(Harmony.Glyph.clef.treble, margin().addY(lines(1)))]);            },            bass : function() {                return group([glyph(Harmony.Glyph.clef.bass, margin().addY(lines(3)))]);            }        },        meter : {            '4/4' : function() {                return group([glyph(Harmony.Glyph.meter.n4, margin().addY(lines(2))), glyph(Harmony.Glyph.meter.n4, margin())]);            },            '3/4' : function() {                return group([glyph(Harmony.Glyph.meter.n3, margin().addY(lines(2))), glyph(Harmony.Glyph.meter.n4, margin())]);            },            '2/4' : function() {                return group([glyph(Harmony.Glyph.meter.n2, margin().addY(lines(2))), glyph(Harmony.Glyph.meter.n4, margin())]);            },        },        note : {            up : {                whole : function whole(color) {                    return group([glyph(Harmony.Glyph.note.whole, margin())]);                },                half : function half(color) {                    return group([glyph(Harmony.Glyph.note.half, margin()), line(margin().addXY(Harmony.style.note.size, 0), xy(0, lines(4)))]);                },                quarter : function quarter(color) {                    return group([glyph(Harmony.Glyph.note.quarter, margin()), line(margin().addXY(Harmony.style.note.size, 0), xy(0, lines(4)))]);                },                eighth : function eighth(color) {                    return group([glyph(Harmony.Glyph.note.quarter, margin()), line(margin().addXY(Harmony.style.note.size, 0), xy(0, lines(4))), glyph(Harmony.Glyph.flag.up.single, margin().addXY(Harmony.style.note.size, lines(4)), xy(0, lines(4)))]);                },                sixteenth : function sixteenth(color) {                    return group([glyph(Harmony.Glyph.note.quarter, margin()), line(margin().addXY(Harmony.style.note.size, 0), xy(0, lines(4))), glyph(Harmony.Glyph.flag.up.double, margin().addXY(Harmony.style.note.size, lines(4)), xy(0, lines(4)))]);                }            },            down : {                whole : function whole(color) {                    return group([glyph(Harmony.Glyph.note.whole, margin())]);                },                half : function half(color) {                    return group([glyph(Harmony.Glyph.note.half, margin()), line(margin(), xy(0, lines(-4)))]);                },                quarter : function quarter(color) {                    return group([glyph(Harmony.Glyph.note.quarter, margin()), line(margin(), xy(0, lines(-4)))]);                },                eighth : function eighth(color) {                    return group([glyph(Harmony.Glyph.note.quarter, margin()), line(margin(), xy(0, lines(-4))), glyph(Harmony.Glyph.flag.down.single, margin().addY(lines(-4)), xy(0, lines(-4)))]);                },                sixteenth : function sixteenth(color) {                    return group([glyph(Harmony.Glyph.note.quarter, margin()), line(margin(), xy(0, lines(-4))), glyph(Harmony.Glyph.flag.down.double, margin().addY(lines(-4)), xy(0, lines(-4)))]);                }            }        },        rest : {            up : {                whole : function whole(color) {                    return group([glyph(Harmony.Glyph.rest.whole, margin().addY(lines(4)))]);                },                half : function half(color) {                    return group([glyph(Harmony.Glyph.rest.half, margin().addY(lines(3)))]);                },                quarter : function quarter(color) {                    return group([glyph(Harmony.Glyph.rest.quarter, margin().addY(lines(4)))]);                },                eighth : function eighth(color) {                    return group([glyph(Harmony.Glyph.rest.eighth, margin().addY(lines(4)))]);                },                sixteenth : function sixteenth(color) {                    return group([glyph(Harmony.Glyph.rest.sixteenth, margin().addY(lines(4)))]);                }            },            down : {                whole : function whole(color) {                    return group([glyph(Harmony.Glyph.rest.whole, margin().addY(lines(1)))]);                },                half : function half(color) {                    return group([glyph(Harmony.Glyph.rest.half, margin())]);                },                quarter : function quarter(color) {                    return group([glyph(Harmony.Glyph.rest.quarter, margin())]);                },                eighth : function eighth(color) {                    return group([glyph(Harmony.Glyph.rest.eighth, margin())]);                },                sixteenth : function sixteenth(color) {                    return group([glyph(Harmony.Glyph.rest.sixteenth, margin())]);                }            }        },        lines : function(size) {            return group((function(size) {                var shapes = [];                for(var i = 0; i < 5; ++i) {                    shapes.push(line(xy(0, lines(i)), xy(size, 0)));                }                return shapes;            })(size));        },        func : {            UN : function() {                return func('?');            },            CD : function() {                return func('..');            },            //                        T_1 : function() {                return func('T', '1');            },            T_1_x5 : function() {                return func('T', '1', '', '-5');            },            T_3 : function() {                return func('T', '3');            },            T_3_a5 : function() {                return func('T', '3', '', '5');            },            T_5 : function() {                return func('T', '5');            },                        TVI_1 : function() {                return func('T', '1', '', '', 'VI');            },            TVI_3 : function() {                return func('T', '3', '', '', 'VI');            },            TVI_5 : function() {                return func('T', '5', '', '', 'VI');            },                        TVImd_1 : function() {                return func('T', '1', 'o', '', 'VI>');            },            TVImd_3 : function() {                return func('T', '3', 'o', '', 'VI>');            },            TVImd_5 : function() {                return func('T', '5', 'o', '', 'VI>');            },            //            S_1 : function() {                return func('S', '1');            },            S_1_x5 : function() {                return func('S', '1', '', '-5');            },            S_3 : function() {                return func('S', '3');            },            S_3_a5 : function() {                return func('S', '3', '', '5');            },            S_5 : function() {                return func('S', '5');            },            Sm_1 : function() {                return func('S', '1', 'o');            },            Sm_3 : function() {                return func('S', '3', 'o');            },            Sm_3_a5 : function() {                return func('S', '3', 'o', '5');            },            Sm_5 : function() {                return func('S', '5', 'o');            },            SM_1 : function() {                return func('S', '1', '+');            },            SM_3 : function() {                return func('S', '3', '+');            },            SM_3_a5 : function() {                return func('S', '3', '+', '5');            },            SM_5 : function() {                return func('S', '5', '+');            },            S_1_a6 : function() {                return func('S', '1', '', '6');            },            S_3_a6 : function() {                return func('S', '3', '', '6');            },            S_5_a6 : function() {                return func('S', '5', '', '6');            },            S_6_a6 : function() {                return func('S', '6', '', '6');            },            Sm_1_a6 : function() {                return func('S', '1', 'o', '6');            },            Sm_3_a6 : function() {                return func('S', '3', 'o', '6');            },            Sm_5_a6 : function() {                return func('S', '5', 'o', '6');            },            Sm_6_a6 : function() {                return func('S', '6', 'o', '6');            },            S_1_a6_x5 : function() {                return func('S', '1', '', '6', '-5');            },            S_3_a6_x5 : function() {                return func('S', '3', '', '6', '-5');            },            S_6_a6_x5 : function() {                return func('S', '6', '', '6', '-5');            },            Sm_1_a6d_x5 : function() {                return func('S', '1', 'o', '6>', '-5');            },            Sm_3_a6d_x5 : function() {                return func('S', '3', 'o', '6>', '-5');            },            Sm_6_a6d_x5 : function() {                return func('S', '6', 'o', '6>', '-5');            },            //            D_1 : function() {                return func('D', '1');            },            D_1_x5 : function() {                return func('D', '1', '', '-5');            },            D_3 : function() {                return func('D', '3');            },            D_3_a5 : function() {                return func('D', '3', '', '5');            },            D_5 : function() {                return func('D', '5');            },            Dm_1 : function() {                return func('D', '1', 'o');            },            Dm_3 : function() {                return func('D', '3', 'o');            },            Dm_3_a5 : function() {                return func('D', '3', 'o', '5');            },            Dm_5 : function() {                return func('D', '5', 'o');            },            D_1_a64 : function() {                return func('D', '1', '', '6', '4');            },            D_4_a64 : function() {                return func('D', '4', '', '6', '4');            },            D_6_a64 : function() {                return func('D', '6', '', '6', '4');            },            D_1_a7 : function() {                return func('D', '1', '', '7');            },            D_3_a7 : function() {                return func('D', '3', '', '7');            },            D_5_a7 : function() {                return func('D', '5', '', '7');            },            D_7_a7 : function() {                return func('D', '7', '', '7');            }        }    };})(Harmony, Kinetic);