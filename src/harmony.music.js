/** * @author Piotr Cholewczuk * @licence MIT * * Date: Jun 06 2012 * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */(function(Harmony, undefined) {    var Accidental = function Accidental(semitones) {        this.semitones = semitones;    };    Harmony.extend(Accidental, Harmony.Obj);    Accidental.enum = new Harmony.Enum({        doubleFlat : function() {            return new Harmony.Music.Accidental(-2);        },        flat : function() {            return new Harmony.Music.Accidental(-1);        },        natural : function() {            return new Harmony.Music.Accidental(0);        },        hash : function() {            return new Harmony.Music.Accidental(1);        },        doubleHash : function() {            return new Harmony.Music.Accidental(2);        }    });    Accidental.prototype.name = function() {        return Accidental.enum.name(this);    };    Accidental.prototype._ = function() {        return Harmony._(this.name());    };    Accidental.prototype.addSemitones = function(semitones) {        if(this.semitones + semitones > 2 || this.semitones + semitones < -2) {            Harmony.error('Wrong semitones : ' + (this.semitones + semitones));        }        this.semitones += semitones;        return this;    };    Accidental.prototype.asSemitones = function() {        return this.semitones;    };    var Note = function Note(sounds) {        this.sounds = sounds % 7;    };    Harmony.extend(Note, Harmony.Obj);    Note.enum = new Harmony.Enum({        c : function() {            return new Harmony.Music.Note(0);        },        d : function() {            return new Harmony.Music.Note(1);        },        e : function() {            return new Harmony.Music.Note(2);        },        f : function() {            return new Harmony.Music.Note(3);        },        g : function() {            return new Harmony.Music.Note(4);        },        a : function() {            return new Harmony.Music.Note(5);        },        b : function() {            return new Harmony.Music.Note(6);        }    });    Note.prototype.name = function() {        return Harmony.Music.Note.enum.name(this);    };    Note.prototype._ = function() {        return Harmony._(this.name());    };    Note.prototype.addSounds = function(sounds) {        var result = {            semitones : 0,            octets : Math.floor((this.sounds + sounds) / 7)        };        for(var i = 0; i < Math.abs(sounds); ++i) {            var prev = this.asSemitones();            if(sounds >= 0) {                this.sounds = ((this.sounds + 1) + 7) % 7;                result.semitones += ((this.asSemitones() - prev) + 12) % 12;            } else {                this.sounds = ((this.sounds - 1) + 7) % 7;                result.semitones -= ((prev - this.asSemitones()) + 12) % 12;            }        }        return result;    };    Note.prototype.asSemitones = function() {        switch (this.sounds) {            case 0:                return 0;            case 1:                return 2;            case 2:                return 4;            case 3:                return 5;            case 4:                return 7;            case 5:                return 9;            case 6:                return 11;        }        Harmony.error('Wrong sound (' + this.sound + ').');    };    Note.prototype.asSounds = function() {        return this.sounds;    };    var Octave = function Octave(octets) {        this.octets = octets;    };    Harmony.extend(Octave, Harmony.Obj);    Octave.enum = new Harmony.Enum({        doubleContra : function() {            return new Harmony.Music.Octave(0);        },        subContra : function() {            return new Harmony.Music.Octave(1);        },        contra : function() {            return new Harmony.Music.Octave(2);        },        great : function() {            return new Harmony.Music.Octave(3);        },        small : function() {            return new Harmony.Music.Octave(4);        },        first : function() {            return new Harmony.Music.Octave(5);        },        second : function() {            return new Harmony.Music.Octave(6);        },        third : function() {            return new Harmony.Music.Octave(7);        },        fourth : function() {            return new Harmony.Music.Octave(8);        },        fifth : function() {            return new Harmony.Music.Octave(9);        },        sixth : function() {            return new Harmony.Music.Octave(10);        }    });    Octave.prototype.name = function() {        return Harmony.Music.Octave.enum.name(this);    };    Octave.prototype._ = function() {        return Harmony._(this.name());    };    Octave.prototype.addOctets = function(octets) {        this.octets += octets;    };    Octave.prototype.asSemitones = function() {        return this.octets * 12;    };    Octave.prototype.asSounds = function() {        return this.octets * 7;    };    var Interval = function Interval(sounds, semitones) {        this.sounds = sounds;        this.semitones = semitones;    };    Harmony.extend(Interval, Harmony.Obj);    Interval.enum = new Harmony.Enum({        doubleDiminishedUnison : function() {            return new Harmony.Music.Interval(0, -2);        },        diminishedUnison : function() {            return new Harmony.Music.Interval(0, -1);        },        perfectUnison : function() {            return new Harmony.Music.Interval(0, 0);        },        augmentedUnison : function() {            return new Harmony.Music.Interval(0, 1);        },        doubleAugmentedUnison : function() {            return new Harmony.Music.Interval(0, 2);        },        doubleDiminishedSecond : function() {            return new Harmony.Music.Interval(1, -1);        },        diminishedSecond : function() {            return new Harmony.Music.Interval(1, 0);        },        minorSecond : function() {            return new Harmony.Music.Interval(1, 1);        },        majorSecond : function() {            return new Harmony.Music.Interval(1, 2);        },        augmentedSecond : function() {            return new Harmony.Music.Interval(1, 3);        },        doubleAugmentedSecond : function() {            return new Harmony.Music.Interval(1, 4);        },        doubleDiminishedThird : function() {            return new Harmony.Music.Interval(2, 1);        },        diminishedThird : function() {            return new Harmony.Music.Interval(2, 2);        },        minorThird : function() {            return new Harmony.Music.Interval(2, 3);        },        majorThird : function() {            return new Harmony.Music.Interval(2, 4);        },        augmentedThird : function() {            return new Harmony.Music.Interval(2, 5);        },        doubleAugmentedThird : function() {            return new Harmony.Music.Interval(2, 6);        },        doubleDiminishedFourth : function() {            return new Harmony.Music.Interval(3, 3);        },        diminishedFourth : function() {            return new Harmony.Music.Interval(3, 4);        },        perfectFourth : function() {            return new Harmony.Music.Interval(3, 5);        },        augmentedFourth : function() {            return new Harmony.Music.Interval(3, 6);        },        doubleAugmentedFourth : function() {            return new Harmony.Music.Interval(3, 7);        },        doubleDiminishedFifth : function() {            return new Harmony.Music.Interval(4, 5);        },        diminishedFifth : function() {            return new Harmony.Music.Interval(4, 6);        },        perfectFifth : function() {            return new Harmony.Music.Interval(4, 7);        },        augmentedFifth : function() {            return new Harmony.Music.Interval(4, 8);        },        doubleAugmentedFifth : function() {            return new Harmony.Music.Interval(4, 9);        },        doubleDiminishedSixth : function() {            return new Harmony.Music.Interval(5, 6);        },        diminishedSixth : function() {            return new Harmony.Music.Interval(5, 7);        },        minorSixth : function() {            return new Harmony.Music.Interval(5, 8);        },        majorSixth : function() {            return new Harmony.Music.Interval(5, 9);        },        augmentedSixth : function() {            return new Harmony.Music.Interval(5, 10);        },        doubleAugmentedSixth : function() {            return new Harmony.Music.Interval(5, 11);        },        doubleDiminishedSeventh : function() {            return new Harmony.Music.Interval(6, 8);        },        diminishedSeventh : function() {            return new Harmony.Music.Interval(6, 9);        },        minorSeventh : function() {            return new Harmony.Music.Interval(6, 10);        },        majorSeventh : function() {            return new Harmony.Music.Interval(6, 11);        },        augmentedSeventh : function() {            return new Harmony.Music.Interval(6, 12);        },        doubleAugmentedSeventh : function() {            return new Harmony.Music.Interval(6, 13);        },        doubleDiminishedOctave : function() {            return new Harmony.Music.Interval(7, 10);        },        diminishedOctave : function() {            return new Harmony.Music.Interval(7, 11);        },        perfectOctave : function() {            return new Harmony.Music.Interval(7, 12);        },        augmentedOctave : function() {            return new Harmony.Music.Interval(7, 13);        },        doubleAugmentedOctave : function() {            return new Harmony.Music.Interval(7, 14);        }    });    Interval.prototype.name = function() {        return Harmony.Music.Interval.enum.name(this);    };    Interval.prototype._ = function() {        return Harmony._(this.name());    };    Interval.prototype.inverse = function() {        this.sounds = (Math.abs(this.sounds - 7)) % 7;        this.semitones = (Math.abs(this.semitones - 12)) % 12;    };    var Direct = function Direct(value) {        this.value = value;    };    Harmony.extend(Direct, Harmony.Obj);    Direct.enum = new Harmony.Enum({        up : function() {            return new Harmony.Music.Direct(1);        },        down : function() {            return new Harmony.Music.Direct(-1);        },    });    Direct.prototype.name = function() {        return Harmony.Music.Direct.enum.name(this);    };    Direct.prototype.reverse = function() {        if(this.value === 1) {            this.value = -1;        } else if(this.value === -1) {            this.value = 1;        } else {            Harmony.error('Wrong value : (' + value + ')');        }    };    var Jump = function Jump(interval, direct) {        this.interval = interval;        this.direct = direct;    };    Harmony.extend(Jump, Harmony.Obj);    Jump.prototype.asSounds = function() {        return this.interval.sounds * this.direct.value;    };    Jump.prototype.asSemitones = function() {        return this.interval.semitones * this.direct.value;    };    var Tone = function Tone(note, accidental) {        this.note = note;        this.accidental = accidental;    };    Harmony.extend(Tone, Harmony.Obj);    Tone.ofNote = function(note) {        return new Tone(note, Harmony.Music.Accidental.enum.of('natural'));    };    Tone.prototype.name = function() {        return 'note=' + this.note.name() + ', accidental=' + this.accidental.name();    };    Tone.prototype._ = function() {        return this.note._() + this.accidental._();    };    Tone.prototype.jump = function(jump) {        var distance = this.note.addSounds(jump.asSounds());        this.accidental.addSemitones(jump.asSemitones() - distance.semitones);    };    Tone.prototype.asSemitones = function() {        return this.note.asSemitones() + this.accidental.asSemitones();    };    Tone.prototype.asSounds = function() {        return this.note.asSounds();    };    Tone.prototype.asGrade = function(tonic) {        var tones = tonic.asTones();        for(var i = 0; i < tones.length; ++i) {            if(tones[i].note.equals(this.note)) {                var semitones = this.asSemitones() - tones[i].asSemitones();                var jump = new Jump(new Harmony.Music.Interval(0, semitones), Direct.enum.of('up'));                return new Harmony.Music.Grade(i, jump);            }        }    };    Tone.prototype.normalize = function(tonic) {        var tones = tonic.asTones();        for(var i = 0; i < tones.length; ++i) {            if(tones[i].note.equals(this.note)) {                this.accidental = tones[i].accidental.clone();            }        }        return this;    };    var Pitch = function Pitch(octave, note, accidental) {        this.octave = octave;        this.note = note;        this.accidental = accidental;    };    Harmony.extend(Pitch, Harmony.Obj);    Pitch.prototype.name = function() {        return 'octave=' + this.octave.name() + ', note=' + this.note.name() + ', accidental=' + this.accidental.name();    };    Pitch.prototype._ = function() {        return this.octave._() + " " + this.note._() + this.accidental._();    };    Pitch.prototype.addSounds = function(sounds) {        var distance = this.note.addSounds(sounds);        this.octave.addOctets(distance.octets);        return this;    };    Pitch.prototype.jump = function(jump) {        var distance = this.note.addSounds(jump.asSounds());        this.octave.addOctets(distance.octets);        this.accidental.addSemitones(jump.asSemitones() - distance.semitones);        return this;    };    Pitch.prototype.asTone = function() {        return new Tone(this.note.clone(), this.accidental.clone());    };    Pitch.prototype.asSemitones = function() {        return this.octave.asSemitones() + this.note.asSemitones() + this.accidental.asSemitones();    };    Pitch.prototype.asSounds = function() {        return this.octave.asSounds() + this.note.asSounds();    };    Pitch.prototype.asGrade = function(tonic) {        var tone = this.asTone();        return tone.asGrade(tonic);    };    Pitch.prototype.normalize = function(tonic) {        var tone = this.asTone();        tone.normalize(tonic);        this.note = tone.note;        this.accidental = tone.accidental;        return this;    };    var Grade = function Grade(sounds, jump) {        this.sounds = sounds % 7;        this.jump = jump;    };    Harmony.extend(Grade, Harmony.Obj);    Grade.ofSounds = function(sounds, jump) {        var jump = jump || new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('perfectUnison'), Harmony.Music.Direct.enum.of('up'));        return new Harmony.Music.Grade(sounds, jump);    };    Grade.prototype.asSounds = function() {        return this.sounds % 7;    };    var Triad = function Triad(intervals) {        this.intervals = intervals;    };    Harmony.extend(Triad, Harmony.Obj);    Triad.enum = new Harmony.Enum({        major : function() {            return new Harmony.Music.Triad([Harmony.Music.Interval.enum.of('majorThird'), Harmony.Music.Interval.enum.of('minorThird')]);        },        minor : function() {            return new Harmony.Music.Triad([IHarmony.Music.nterval.enum.of('minorThird'), Harmony.Music.Interval.enum.of('majorThird')]);        },        increased : function() {            return new Harmony.Music.Harmony.Music.Triad([Harmony.Music.Interval.enum.of('majorThird'), Harmony.Music.Interval.enum.of('majorThird')]);        },        decreased : function() {            return new Harmony.Music.Triad([Harmony.Music.Interval.enum.of('minorThird'), Harmony.Music.Interval.enum.of('minorThird')]);        }    });    Triad.prototype.name = function() {        return Harmony.Music.Triad.enum.name(this);    };    var Scale = function Scale(intervals) {        this.intervals = intervals;    };    Harmony.extend(Scale, Harmony.Obj);    Scale.enum = new Harmony.Enum({        major : function() {            return new Harmony.Music.Scale([Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('minorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('minorSecond')]);        },        minor : function() {            return new Harmony.Music.Scale([Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('minorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('minorSecond'), Harmony.Music.Interval.enum.of('majorSecond'), Harmony.Music.Interval.enum.of('majorSecond')]);        }    });    Scale.prototype.name = function() {        return Harmony.Music.Scale.enum.name(this);    };    Scale.prototype._ = function() {        return Harmony._(this.name());    };    var Clef = function Clef(pitch) {        this.pitch = pitch;    };    Harmony.extend(Clef, Harmony.Obj);    Clef.enum = new Harmony.Enum({        treble : function() {            return new Clef(new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('first'), Harmony.Music.Note.enum.of('e'), Harmony.Music.Accidental.enum.of('natural')));        },        bass : function() {            return new Clef(new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('great'), Harmony.Music.Note.enum.of('g'), Harmony.Music.Accidental.enum.of('natural')));        }    });    Clef.prototype.name = function() {        return Harmony.Music.Clef.enum.name(this);    };    Clef.prototype.asSounds = function() {        return this.pitch.asSounds();    };    var Tonic = function Tonic(tone, scale) {        this.tone = tone;        this.scale = scale;    };    Harmony.extend(Tonic, Harmony.Obj);    Tonic.prototype.name = function() {        return 'tone={' + this.tone.name() + '}, scale=' + this.scale.name();    };    Tonic.prototype._ = function() {        return this.tone._() + " " + this.scale._();    };    Tonic.prototype.asTones = function() {        var tones = [];        var tone = this.tone.clone();        tones.push(tone.clone());        for(var i = 0; i < this.scale.intervals.length - 1; ++i) {            tone.jump(new Harmony.Music.Jump(this.scale.intervals[i].clone(), Harmony.Music.Direct.enum.of('up')));            tones.push(tone.clone());        }        return tones;    };    Tonic.prototype.circleUp = function() {        this.tone.jump(new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('perfectFifth'), Harmony.Music.Direct.enum.of('up')));    };    Tonic.prototype.circleDown = function() {        this.tone.jump(new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('perfectFifth'), Harmony.Music.Direct.enum.of('down')));    };    Tonic.prototype.containsTone = function(tone) {        var tones = this.asTones();        for(var i = 0; i < tones.length; ++i) {            if(tones[i].equals(tone)) {                return true;            }        }        return false;    };    Tonic.prototype.toneOnGrade = function(grade) {        var tone = this.asTones()[grade.asSounds()].clone();        tone.jump(grade.jump);        return tone;    };    Tonic.prototype.tonesOnGrades = function(grades) {        var tones = [];        for(var i = 0; i < grades.length; ++i) {            tones.push(this.toneOnGrade(grades[i]));        }        return tones;    };    Tonic.prototype.asParallel = function() {        var tone = this.tone.clone();        if(Harmony.Music.Scale.enum.of('major').equals(this.scale)) {            tone.jump(new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('minorThird'), Harmony.Music.Direct.enum.of('down')));            return new Harmony.Music.Tonic(tone, Harmony.Music.Scale.enum.of('minor'));        } else if(Harmony.Music.Scale.enum.of('minor').equals(this.scale)) {            tone.jump(new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('minorThird'), Harmony.Music.Direct.enum.of('up')));            return new Harmony.Music.Tonic(tone, Harmony.Music.Scale.enum.of('major'));        }        return this.clone();    };    Tonic.prototype.accidentals = function() {        var count = {            doubleFlat : 0,            flat : 0,            natural : 0,            hash : 0,            doubleHash : 0,            count : 0        };        var tones = this.asTones();        for(var i = 0; i < tones.length; ++i) {            count[tones[i].accidental.name()]++;            if(tones[i].accidental.name() !== 'natural') {                count.count++;            }        }        return count;    };    var Chord = function Chord(pitches) {        this.pitches = pitches;    };    Harmony.extend(Chord, Harmony.Obj);    Chord.prototype.name = function() {        var name = 'pitches=[';        for(var i = 0; i < this.pitches.length; ++i) {            if(this.pitches[i]) {                name = '{' + this.pitches[i].name() + '}';                if(i < this.pitches.length - 1) {                    name += ', ';                }            }        }        name += ']';        return name;    };    Chord.prototype.set = function(voiceIndex, pitch) {        this.pitches[voiceIndex] = pitch;    };    var Func = function Function(family, base, grades, type, revert, add, sub, mode) {        this.family = family;        this.base = base;        this.grades = grades;        this.type = type;        this.revert = revert;        this.add = add || [];        this.sub = sub || [];        this.mode = '';    };    Harmony.extend(Func, Harmony.Obj);    Func.enum = new Harmony.Enum({        CD : function() {            return new Harmony.Music.Func('', undefined, [], '..', 0, [], [], '');        },        UN : function() {            return new Harmony.Music.Func('', undefined, [], 'UN', 0, [], [], '');        },        //        T_1 : function() {            return new Harmony.Music.Func('T', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2), //            Harmony.Music.Grade.ofSounds(4)], //            'T', 0, [], [], '');        },        T_1_x5 : function() {            return new Harmony.Music.Func('T', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2)], //            'T', 0, [], [4], '');        },        T_3 : function() {            return new Harmony.Music.Func('T', Harmony.Music.Grade.ofSounds(2), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(4)], //            'T', 1, [], [], '');        },        T_3_a5 : function() {            return new Harmony.Music.Func('T', Harmony.Music.Grade.ofSounds(2), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4)], //            'T', 1, [4], [], '');        },        T_5 : function() {            return new Harmony.Music.Func('T', Harmony.Music.Grade.ofSounds(4), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2)], //            'T', 2, [], [], '');        },                       TVI_1 : function() {            return new Harmony.Music.Func('TVI', Harmony.Music.Grade.ofSounds(5), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2)], //            'T', 0, [], [], '');        },        TVI_3 : function() {            return new Harmony.Music.Func('TVI', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2), //            Harmony.Music.Grade.ofSounds(5)], //            'T', 1, [], [], '');        },        TVI_5 : function() {            return new Harmony.Music.Func('TVI', Harmony.Music.Grade.ofSounds(2), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(5)], //            'T', 2, [], [], '');        },                TVImd_1 : function() {            return new Harmony.Music.Func('TVImd', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'T', 0, [], [], 'minor');        },        TVImd_3 : function() {            return new Harmony.Music.Func('TVImd', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'T', 1, [], [], 'minor');        },        TVImd_5 : function() {            return new Harmony.Music.Func('TVImd', Harmony.Music.Grade.ofSounds(2, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'T', 2, [], [], 'minor');        },        //        S_1 : function() {            return new Harmony.Music.Func('S', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 0, [], [], '');        },        S_1_x5 : function() {            return new Harmony.Music.Func('S', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5)], //            'S', 0, [], [4], '');        },        S_3 : function() {            return new Harmony.Music.Func('S', Harmony.Music.Grade.ofSounds(5), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [], [], '');        },        S_3_a5 : function() {            return new Harmony.Music.Func('S', Harmony.Music.Grade.ofSounds(5), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [4], [], '');        },        S_5 : function() {            return new Harmony.Music.Func('S', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5)], //            'S', 2, [], [], '');        },        Sm_1 : function() {            return new Harmony.Music.Func('Sm', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 0, [], [], 'minor');        },        Sm_3 : function() {            return new Harmony.Music.Func('Sm', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [], [], 'minor');        },        Sm_3_a5 : function() {            return new Harmony.Music.Func('Sm', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [4], [], 'minor');        },        Sm_5 : function() {            return new Harmony.Music.Func('Sm', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'S', 2, [], [], 'minor');        },        SM_1 : function() {            return new Harmony.Music.Func('SM', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('up'))), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 0, [], [], 'major');        },        SM_3 : function() {            return new Harmony.Music.Func('SM', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('up'))), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [], [], 'major');        },        SM_3_a5 : function() {            return new Harmony.Music.Func('SM', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('up'))), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [4], [], 'major');        },        SM_5 : function() {            return new Harmony.Music.Func('SM', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('up')))], //            'S', 2, [], [], 'major');        },        S_1_a6 : function() {            return new Harmony.Music.Func('S_a6', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(5), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 0, [6], [], '');        },        S_3_a6 : function() {            return new Harmony.Music.Func('S_a6', Harmony.Music.Grade.ofSounds(5), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [6], [], '');        },        S_5_a6 : function() {            return new Harmony.Music.Func('S_a6', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5)], //            'S', 2, [6], [], '');        },        S_6_a6 : function() {            return new Harmony.Music.Func('S_a6', Harmony.Music.Grade.ofSounds(1), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5)], //            'S', 3, [6], [], '');        },        Sm_1_a6 : function() {            return new Harmony.Music.Func('Sm_a6', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 0, [6], [], 'minor');        },        Sm_3_a6 : function() {            return new Harmony.Music.Func('Sm_a6', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(0)], //            'S', 1, [6], [], 'minor');        },        Sm_5_a6 : function() {            return new Harmony.Music.Func('Sm_a6', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'S', 2, [6], [], 'minor');        },        Sm_6_a6 : function() {            return new Harmony.Music.Func('Sm_a6', Harmony.Music.Grade.ofSounds(1), //            [Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'S', 3, [6], [], 'minor');        },        S_1_a6_x5 : function() {            return new Harmony.Music.Func('S_a6_x5', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5), //            Harmony.Music.Grade.ofSounds(1)], //            'S', 0, [5], [4], '');        },        S_3_a6_x5 : function() {            return new Harmony.Music.Func('S_a6_x5', Harmony.Music.Grade.ofSounds(5), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(1)], //            'S', 1, [5], [4], '');        },        S_6_a6_x5 : function() {            return new Harmony.Music.Func('S_a6_x5', Harmony.Music.Grade.ofSounds(1), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5)], //            'S', 2, [5], [4], '');        },        Sm_1_a6d_x5 : function() {            return new Harmony.Music.Func('Sm_a6d_x5', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            Harmony.Music.Grade.ofSounds(1, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'S', 0, [5], [4], 'minor');        },        Sm_3_a6d_x5 : function() {            return new Harmony.Music.Func('Sm_a6d_x5', Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(1, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'S', 1, [5], [4], 'minor');        },        Sm_6_a6d_x5 : function() {            return new Harmony.Music.Func('Sm_a6d_x5', Harmony.Music.Grade.ofSounds(1, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(5, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'S', 2, [5], [4], 'minor');        },        //        D_1 : function() {            return new Harmony.Music.Func('D', Harmony.Music.Grade.ofSounds(4), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 0, [], [], '');        },        D_1_x5 : function() {            return new Harmony.Music.Func('D', Harmony.Music.Grade.ofSounds(4), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6)], //            'D', 0, [], [4], '');        },        D_3 : function() {            return new Harmony.Music.Func('D', Harmony.Music.Grade.ofSounds(6), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 1, [], [], '');        },        D_3_a5 : function() {            return new Harmony.Music.Func('D', Harmony.Music.Grade.ofSounds(6), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 1, [4], [], '');        },        D_5 : function() {            return new Harmony.Music.Func('D', Harmony.Music.Grade.ofSounds(1), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6)], //            'D', 2, [], [], '');        },        Dm_1 : function() {            return new Harmony.Music.Func('Dm', Harmony.Music.Grade.ofSounds(4), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 0, [], [], 'minor');        },        Dm_3 : function() {            return new Harmony.Music.Func('Dm', Harmony.Music.Grade.ofSounds(6, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 1, [], [], 'minor');        },        Dm_3_a5 : function() {            return new Harmony.Music.Func('Dm', Harmony.Music.Grade.ofSounds(6, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down'))), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 1, [], [4], 'minor');        },        Dm_5 : function() {            return new Harmony.Music.Func('Dm', Harmony.Music.Grade.ofSounds(1), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('down')))], //            'D', 2, [], [], 'minor');        },        D_1_a64 : function() {            return new Harmony.Music.Func('D_a64', Harmony.Music.Grade.ofSounds(4), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(0), //            Harmony.Music.Grade.ofSounds(2)], //            'D', 0, [3, 5], [], '');        },        D_4_a64 : function() {            return new Harmony.Music.Func('D_a64', Harmony.Music.Grade.ofSounds(0), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(2)], //            'D', 1, [3, 5], [], '');        },        D_6_a64 : function() {            return new Harmony.Music.Func('D_a64', Harmony.Music.Grade.ofSounds(2), //            [Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(0)], //            'D', 2, [3, 5], [], '');        },                D_1_a7 : function() {            return new Harmony.Music.Func('D_a7', Harmony.Music.Grade.ofSounds(4), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(6), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 0, [6], [], '');        },        D_3_a7 : function() {            return new Harmony.Music.Func('D_a7', Harmony.Music.Grade.ofSounds(6), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(1)], //            'D', 1, [6], [], '');        },        D_5_a7 : function() {            return new Harmony.Music.Func('D_a7', Harmony.Music.Grade.ofSounds(1), //            [Harmony.Music.Grade.ofSounds(3), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6)], //            'D', 2, [6], [], '');        },        D_7_a7 : function() {            return new Harmony.Music.Func('D_a7', Harmony.Music.Grade.ofSounds(3), //            [Harmony.Music.Grade.ofSounds(1), //            Harmony.Music.Grade.ofSounds(4), //            Harmony.Music.Grade.ofSounds(6)], //            'D', 2, [6], [], '');        }    });    Func.prototype.name = function() {        return Harmony.Music.Func.enum.name(this);    };        Func.prototype._ = function() {        return Harmony._(this.name());    };        Func.prototype.html = function(tonic) {        var _ = '<strong>' + tonic.toneOnGrade(this.getBase(tonic.scale))._() + '</strong>';        var grades = this.getGrades(tonic.scale);        for(var i = 0; i < grades.length; ++i) {            _ += ', ' + tonic.toneOnGrade(grades[i])._();        }        return _;    };        Func.prototype.getBase = function(scale) {        var base = this.base;        if(this.type === 'D' && Harmony.Music.Scale.enum.of('minor').equals(scale) && this.mode === '') {            if(this.base.equals(Harmony.Music.Grade.ofSounds(6))) {                base = Harmony.Music.Grade.ofSounds(6, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('up')));            }        }        return base;    };        Func.prototype.getGrades = function(scale) {        var grades = this.grades;        if(this.type === 'D' && Harmony.Music.Scale.enum.of('minor').equals(scale) && this.mode === '') {            grades = [];            for(var i = 0; i < this.grades.length; ++i) {                if(this.grades[i].equals(Harmony.Music.Grade.ofSounds(6))) {                    grades.push(Harmony.Music.Grade.ofSounds(6, new Harmony.Music.Jump(Harmony.Music.Interval.enum.of('augmentedUnison'), Harmony.Music.Direct.enum.of('up'))));                } else {                    grades.push(this.grades[i]);                }            }        }        return grades;    };    Func.prototype.isTriad = function() {        return this.type === 'T' || this.type === 'S' || this.type === 'D';    };    Func.prototype.isContinuation = function() {        return this.type === '..';    };    var Duration = function Duration(divider) {        this.divider = divider;    };    Harmony.extend(Duration, Harmony.Obj);    Duration.enum = new Harmony.Enum({        whole : function() {            return new Harmony.Music.Duration(1);        },        half : function() {            return new Harmony.Music.Duration(2);        },        quarter : function() {            return new Harmony.Music.Duration(4);        },        eighth : function() {            return new Harmony.Music.Duration(8);        },        sixteenth : function() {            return new Harmony.Music.Duration(16);        }    });    Duration.prototype.name = function() {        return Harmony.Music.Duration.enum.name(this);    };    var Meter = function Meter(measures, duration, base) {        this.measures = measures;        this.duration = duration;        this.base = base;    };    Harmony.extend(Meter, Harmony.Obj);    Meter.enum = new Harmony.Enum({        '4/4' : function() {            return new Harmony.Music.Meter(4, Harmony.Music.Duration.enum.of('quarter'), Harmony.Music.Duration.enum.of('half'));        },        '3/4' : function() {            return new Harmony.Music.Meter(3, Harmony.Music.Duration.enum.of('quarter'), Harmony.Music.Duration.enum.of('quarter'));        },        '2/4' : function() {            return new Harmony.Music.Meter(2, Harmony.Music.Duration.enum.of('quarter'), Harmony.Music.Duration.enum.of('quarter'));        },    });    Meter.prototype.name = function() {        return Harmony.Music.Meter.enum.name(this);    };    Meter.prototype._ = function() {        return Harmony._(this.name());    };    Harmony.Music = {        Accidental : Accidental,        Note : Note,        Octave : Octave,        Interval : Interval,        Direct : Direct,        Jump : Jump,        Tone : Tone,        Pitch : Pitch,        Grade : Grade,        Triad : Triad,        Scale : Scale,        Clef : Clef,        Tonic : Tonic,        Chord : Chord,        Func : Func,        Duration : Duration,        Meter : Meter    };})(Harmony);