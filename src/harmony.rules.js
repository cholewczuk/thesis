/** * @author Piotr Cholewczuk * @licence MIT * * Date: Jun 06 2012 * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */var Harmony = Harmony || {};(function(Harmony, undefined) {    var Pair = function Pair(x, y) {        this.x = x;        this.y = y;    };    Harmony.extend(Pair, Harmony.Obj);    var Pairs = function Pairs() {        this.list = [];    };    Harmony.extend(Pairs, Harmony.Obj);    Pairs.prototype.add = function(x, y) {        this.list.push(new Pair(x, y));    };    Pairs.prototype.hasIntersection = function(other) {        for(var i = 0; i < this.list.length; ++i) {            for(var j = 0; j < other.list.length; ++j) {                if(this.list[i].equals(other.list[j])) {                    return true;                }            }        }    };    var Index = function Index(tact, beat) {        this.tact = tact;        this.beat = beat;    };    Harmony.extend(Index, Harmony.Obj);    Index.prototype.name = function() {        return 'tact=' + this.tact + ', beat=' + this.beat;    };        Index.prototype.html = function() {        return 'takt: <strong>' + (this.tact + 1) + '</strong>, pozycja: <strong>' + (this.beat + 1) + '</strong>';    };    Index.prototype.isStrong = function() {        return this.beat === 0;    };        var Message = function Message(index, title, text) {        this.index = index;        this.title = title;        this.text = text;    };        Harmony.extend(Message, Harmony.Obj);    var Accord = function Accord(func, index, continuation) {        this.func = func;        this.index = index;        this.chord = new Harmony.Music.Chord([undefined, undefined, undefined, undefined]);        this.continuation = continuation || false;    };    Harmony.extend(Accord, Harmony.Obj);    Accord.prototype.name = function() {        return 'func={' + this.func.name() + '}, chord={' + this.chord.name() + '}, index={' + this.index.name() + '}';    };        Accord.prototype.html = function() {        var html = '';        if(this.pitch(3)) {            html += '<strong>' + this.pitch(3).asTone()._() + '</strong>';        }        for(var i = 2; i >= 0; --i) {            if(this.pitch(i)) {                html += ', ' + this.pitch(i).asTone()._();            }        }        return html;    };    Accord.prototype.setPitch = function(i, pitch) {        this.chord.set(i, pitch);    };    Accord.prototype.pitch = function(voice) {        return this.chord.pitches[voice];    };        Accord.prototype.isContinuation = function() {        return this.continuation;             };    Accord.prototype.isChordComplete = function() {        for(var i = 0; i < this.chord.pitches.length && i < 4; ++i) {            if(!this.chord.pitches[i]) {                return false;            }        }        return true;    };    Accord.prototype.isValid = function(tonic) {              var baseAsTone = tonic.toneOnGrade(this.func.getBase(tonic.scale));        if(!this.chord.pitches[3] || !baseAsTone.equals(this.chord.pitches[3].asTone())) {            return false;        }        var _pitches = [];        for(var j = 0; j < this.chord.pitches.length - 1 && j < 3; ++j) {            if(this.chord.pitches[j]) {                _pitches.push(this.chord.pitches[j].clone());            } else {                _pitches.push(undefined);            }        }        var grades = this.func.getGrades(tonic.scale);        for(var j = 0; j < grades.length; ++j) {            var grade = grades[j];            var ok = false;            for(var k = 0; k < _pitches.length; ++k) {                var gradeAsTone = tonic.toneOnGrade(grade);                if(_pitches[k] && gradeAsTone.equals(_pitches[k].asTone())) {                    _pitches[k] = undefined;                    ok = true;                    break;                }            }            if(!ok) {                return false;            }        }        return true;    };    Accord.prototype.isFocused = function(tonic) {    };    Accord.prototype.isVast = function(tonic) {    };    var Context = function Context(tonic, meter) {        this.tonic = tonic;        this.meter = meter;        this.accords = [];        this.messages = [];    };    Harmony.extend(Context, Harmony.Obj);    Context.prototype.addMessages = function(messages) {        for(var i = 0; i < messages.length; ++i) {            this.messages.push(messages[i]);                    }    };    Context.prototype.result = function() {        var html = '';        if(this.messages.length) {            html += '<div><div class="ui-widget"><div class="ui-state-error ui-corner-all" style="padding: 0 .7em;"><p><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><strong>Znaleziono błędy:</strong></p></div></div>';                        for(var i = 0; i < this.accords.length; ++i) {                var text = [];                for(var j = 0; j < this.messages.length; ++j) {                    if(this.messages[j] && this.accords[i].index.equals(this.messages[j].index)) {                        text.push(this.messages[j].text);                    }                }                if(text.length) {                    html +=  '<div><h3><a href="#">' + this.accords[i].index.html() + '</a></h3><div>';                    if(text.length === 1) {                         html += text[0];                    } else if(text.length > 1) {                         html += '<ul>';                         for(var k = 0; k < text.length; ++k) {                             html += '<li>' + text[k] + '</li>';                         }                         html += '</ul>';                    }                    html += '</div></div>';                }            }            html += '</div>';        }        return html;    };    Context.build = function(score) {        var count = score.tacts * score.meter.measures;        var divider = score.meter.duration.divider;        var context = new Context(score.tonic.clone(), score.meter.clone());        for(var i = 0; i < count; ++i) {            var beat = i % score.meter.measures;            var func = score.funcs.funcs[i];            var continuation = false;            if(func.isContinuation()) {                func = context.accords[i - 1] ? context.accords[i - 1].func : Harmony.Music.Func.enum.of('UN');                continuation = true;            }            context.accords.push(new Accord(func.clone(), new Index(parseInt(i / score.meter.measures), beat), continuation));        }        function getPitch(marks, len) {            var _len = 0;            var _nextLen = 0;            var pitch = undefined;            for(var i = 0; i < marks.length; ++i) {                if(!marks[i].rest) {                    pitch = marks[i].pitch;                } else {                    pitch = undefined;                }                _nextLen = _len + 16 / marks[i].duration.divider;                if(_len <= len && len < _nextLen) {                    return pitch ? pitch.clone() : undefined;                }                _len = _nextLen;            }        }        var voices = score.getVoices();        for(var i = 0; i < voices.length; ++i) {            for(var j = 0; j < context.accords.length; ++j) {                accord = context.accords[j];                var len = j * (16 / divider);                context.accords[j].setPitch(i, getPitch(voices[i].marks, len));            }        }        return context;    };    Context.prototype.name = function() {        var accords = 'accords=[{';        for(var i = 0; i < this.accords.length; ++i) {            if(this.accords[i]) {                accords += this.accords[i].name();                if(i < this.accords.length - 1) {                    accords += '}, {';                }            }        }        accords += '}]';        return 'tonic={' + this.tonic.name() + '}, meter={' + this.meter.name() + '}, ' + accords;    };    var Rule = function Rule(title, callback) {        this.title = title;        this.callback = callback;        this.messages = [];    };    Harmony.extend(Rule, Harmony.Obj);    Rule.prototype.apply = function(context) {        this.messages = [];        var result = this.callback(context);        context.addMessages(this.messages);        return result;    };    Rule.prototype.addMessage = function(index, text) {        this.messages.push(new Message(index, this.title, text));    };        var Vertex = function Vertex(name) {        this.name = name;        this.outgoingEdges = {};    };        Vertex.prototype.addOutgoingEdge = function(vertex) {        this.outgoingEdges[vertex.name] = vertex;    };        Vertex.prototype.hasEdgeTo = function(name) {        return this.outgoingEdges[name] ? true : false;          };        Vertex.prototype.getNextVertex = function(name) {        return this.outgoingEdges[name];          };        Vertex.prototype._ = function() {        return Harmony._(this.name);    };        Vertex.prototype.html = function() {        var html = '<ul>';        for(var p in this.outgoingEdges) {            if(this.outgoingEdges.hasOwnProperty(p) && this.outgoingEdges[p] && this.outgoingEdges[p].name) {                html += '<li>' + Harmony._(this.outgoingEdges[p].name) + '</li>';            }        }        html += '</ul>';        return html;    };          var graph = (function() {        var map = {            START : new Vertex('START'),            T : new Vertex('T'),            TVI : new Vertex('TVI'),            TVImd : new Vertex('TVImd'),            S : new Vertex('S'),            Sm : new Vertex('Sm'),            SM : new Vertex('SM'),            S_a6 : new Vertex('S_a6'),            Sm_a6 : new Vertex('Sm_a6'),            S_a6_x5 : new Vertex('S_a6_x5'),            Sm_a6d_x5 : new Vertex('Sm_a6d_x5'),            D : new Vertex('D'),            Dm : new Vertex('Dm'),            D_a64 : new Vertex('D_a64'),            D_a7 : new Vertex('D_a7')        };                map.START.addOutgoingEdge(map.T);                map.T.addOutgoingEdge(map.S);        map.T.addOutgoingEdge(map.S_a6);        map.T.addOutgoingEdge(map.S_a6_x5);        map.T.addOutgoingEdge(map.D);        map.T.addOutgoingEdge(map.D_a64);        map.T.addOutgoingEdge(map.D_a7);                map.TVI.addOutgoingEdge(map.S);        map.TVI.addOutgoingEdge(map.S_a6);        map.TVI.addOutgoingEdge(map.S_a6_x5);        map.TVI.addOutgoingEdge(map.SM);                map.TVImd.addOutgoingEdge(map.Sm);        map.TVImd.addOutgoingEdge(map.Sm_a6);        map.TVImd.addOutgoingEdge(map.Sm_a6d_x5);                map.S.addOutgoingEdge(map.T);        map.S.addOutgoingEdge(map.SM);        map.S.addOutgoingEdge(map.Sm);        map.S.addOutgoingEdge(map.S_a6);        map.S.addOutgoingEdge(map.D);        map.S.addOutgoingEdge(map.D_a64);        map.S.addOutgoingEdge(map.D_a7);                map.Sm.addOutgoingEdge(map.Sm_a6);        map.Sm.addOutgoingEdge(map.Sm_a6d_x5);        map.Sm.addOutgoingEdge(map.D);        map.Sm.addOutgoingEdge(map.D_a64);        map.Sm.addOutgoingEdge(map.D_a7);                map.SM.addOutgoingEdge(map.D);        map.SM.addOutgoingEdge(map.D_a7);                map.S_a6.addOutgoingEdge(map.T);        map.S_a6.addOutgoingEdge(map.D);        map.S_a6.addOutgoingEdge(map.Dm);        map.S_a6.addOutgoingEdge(map.D_a64);        map.S_a6.addOutgoingEdge(map.D_a7);        map.Sm_a6.addOutgoingEdge(map.Sm_a6d_x5);        map.Sm_a6.addOutgoingEdge(map.Dm);        map.Sm_a6.addOutgoingEdge(map.D_a64);        map.Sm_a6.addOutgoingEdge(map.D_a7);                       map.S_a6_x5.addOutgoingEdge(map.D);        map.S_a6_x5.addOutgoingEdge(map.Dm);        map.S_a6_x5.addOutgoingEdge(map.D_a64);        map.S_a6_x5.addOutgoingEdge(map.D_a7);                map.Sm_a6d_x5.addOutgoingEdge(map.D_a64);                map.D.addOutgoingEdge(map.T);        map.D.addOutgoingEdge(map.TVI);        map.D.addOutgoingEdge(map.D_a7);                map.Dm.addOutgoingEdge(map.S);                map.D_a64.addOutgoingEdge(map.D);        map.D_a64.addOutgoingEdge(map.D_a7);                map.D_a7.addOutgoingEdge(map.T);        map.D_a7.addOutgoingEdge(map.TVI);        map.D_a7.addOutgoingEdge(map.TVImd);                return map;    })();    var rules = [    // -    new Rule('Wszystkie akordy powinny być czterodzwiękami.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var accord = context.accords[i];            if(!accord.isChordComplete()) {                that.addMessage(accord.index, 'Akord nie jest czterodzwiękiem.');            }        }    }),    //?    new Rule('Głosy nie mogą się krzyżować.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var accord = context.accords[i];            var _pitches = [];            (function copyPitches(pitches) {                for(var j = 0; j < pitches.length; ++j) {                    if(pitches[j]) {                        _pitches.push(pitches[j].clone());                    }                }            })(accord.chord.pitches);            for(var j = 1; j < _pitches.length; ++j) {                (function checkCross(index, prev, pitch) {                    if(prev.asSounds() < pitch.asSounds()) {                        that.addMessage(index.clone(), 'Niedozwolone krzyżowanie głosów.');                    }                })(accord.index, _pitches[j - 1], _pitches[j]);            }        }    }),    // D    new Rule('Wysokości poszczególnych dzwięków mieszczą się w skalach swoich głosów.', function(context) {        var that = this;        var limits = [{            from : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('first'), Harmony.Music.Note.enum.of('c'), Harmony.Music.Accidental.enum.of('natural')).asSounds(),            to : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('second'), Harmony.Music.Note.enum.of('a'), Harmony.Music.Accidental.enum.of('natural')).asSounds()        }, {            from : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('small'), Harmony.Music.Note.enum.of('f'), Harmony.Music.Accidental.enum.of('natural')).asSounds(),            to : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('second'), Harmony.Music.Note.enum.of('c'), Harmony.Music.Accidental.enum.of('natural')).asSounds()        }, {            from : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('small'), Harmony.Music.Note.enum.of('c'), Harmony.Music.Accidental.enum.of('natural')).asSounds(),            to : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('first'), Harmony.Music.Note.enum.of('a'), Harmony.Music.Accidental.enum.of('natural')).asSounds()        }, {            from : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('great'), Harmony.Music.Note.enum.of('e'), Harmony.Music.Accidental.enum.of('natural')).asSounds(),            to : new Harmony.Music.Pitch(Harmony.Music.Octave.enum.of('first'), Harmony.Music.Note.enum.of('c'), Harmony.Music.Accidental.enum.of('natural')).asSounds()        }];        for(var i = 0; i < context.accords.length; ++i) {            var accord = context.accords[i].clone();            for(var j = 0; j < context.accords[i].chord.pitches.length && j < limits.length; ++j) {                (function(index, pitch) {                    if(pitch) {                        var sounds = pitch.asSounds();                        if(!(limits[j].from <= sounds && sounds <= limits[j].to)) {                            that.addMessage(index.clone(), 'Dźwięk [' + pitch.asTone()._() + '] wykracza poza skalę ' + (j + 1) + '. głosu.');                        }                    }                })(accord.index, accord.chord.pitches[j]);            }        }    }),    // -    new Rule('Wszystkie akordy powinny posiadać przypisaną funkcję harmoniczną.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var accord = context.accords[i];            if(Harmony.Music.Func.enum.of('UN').equals(accord.func)) {                that.addMessage(accord.index, 'Akord nie ma przypisanej funkcji harmonicznej.');            }        }    }),    // A    new Rule('Składniki akordu pasują do przypisanej funkcji harmonicznej.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var tonic = context.tonic;            var accord = context.accords[i].clone();            var index = accord.index;            if(!Harmony.Music.Func.enum.of('UN').equals(accord.func)) {                if(!accord.isValid(tonic)) {                    that.addMessage(index, 'Składowe akordu [' + accord.html() + '] nie pasują do przypisanej funkcji harmonicznej [' + accord.func.html(tonic) + '].');                }            }        }    }),    // M    new Rule('Niedozwolone jest prowadzenie głosów w równoległych oktawach.', function(context) {        function getPairs(accord) {            var pairs = new Pairs();            for(var i = 0; i < 4; ++i) {                for(var j = i + 1; j < 4; ++j) {                    if(i !== j && ((accord.pitch(i).asSounds() - accord.pitch(j).asSounds()) % 7 === 0)) {                        pairs.add(i, j);                    }                }            }            return pairs;        };        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(prev && !accord.isContinuation() && accord.isChordComplete() && prev.isChordComplete()) {                if(getPairs(accord).hasIntersection(getPairs(prev))) {                    that.addMessage(index, 'Niedozwolone prowadzenie głosów w równoległych oktawach.');                }            }        }    }),    // N    new Rule('Niedozwolone jest prowadzenie głosów w równoległych kwintach.', function(context) {        function getPairs(accord) {            var pairs = new Pairs();            for(var i = 0; i < 4; ++i) {                for(var j = i + 1; j < 4; ++j) {                    if(i !== j && ((accord.pitch(i).asSounds() - accord.pitch(j).asSounds()) % 7 === 4)) {                        pairs.add(i, j);                    }                }            }            return pairs;        };        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(prev && !accord.isContinuation() && accord.isChordComplete() && prev.isChordComplete()) {                if(getPairs(accord).hasIntersection(getPairs(prev))) {                    that.addMessage(index, 'Niedozwolone prowadzenie głosów w równoległych kwintach.');                }            }        }    }),    // O    /*new Rule('Niedozwolone jest prowadzenie wszystkich głosów w jedym kierunku.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(prev && accord.isChordComplete() && prev.isChordComplete()) {                var ok = false;                for(var j = 0; j < 4; ++j) {                    if(accord.pitch(j).asSounds() <= prev.pitch(j).asSounds()) {                        ok = true;                    }                }                if(!ok) {                    that.addMessage(index, 'Niedozwolone prowadzenie wszystkich głosów w jedym kierunku.');                }            }        }    }),    // P    new Rule('Niedozwolone jest skośne brzmienie półtonu.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(prev && accord.isChordComplete() && prev.isChordComplete()) {                var error = false;                for(var i = 0; i < 4 && !error; ++i) {                    for(var j = 0; j < 4; ++j) {                        if(accord.pitch(i).note.equals(prev.pitch(j).note) && !accord.pitch(i).accidental.equals(prev.pitch(j).accidental) && i != j) {                            error = true;                        }                    }                }                if(error) {                    that.addMessage(index, 'Niedozwolone skośne brzmienie półtonu.');                }            }        }    }),    // J    new Rule('Niedozwolone są skoki pojedynczego głosu o interwał zwiększony.', function(context) {        var that = this;        var forbiddenIntervals = [            Harmony.Music.Interval.enum.of('augmentedSecond'),            Harmony.Music.Interval.enum.of('doubleAugmentedSecond'),            Harmony.Music.Interval.enum.of('augmentedThird'),            Harmony.Music.Interval.enum.of('doubleAugmentedThird'),            Harmony.Music.Interval.enum.of('augmentedFourth'),            Harmony.Music.Interval.enum.of('doubleAugmentedFourth'),            Harmony.Music.Interval.enum.of('augmentedFifth'),            Harmony.Music.Interval.enum.of('doubleAugmentedFifth'),            Harmony.Music.Interval.enum.of('augmentedSixth'),            Harmony.Music.Interval.enum.of('doubleAugmentedSixth'),            Harmony.Music.Interval.enum.of('augmentedSeventh'),            Harmony.Music.Interval.enum.of('doubleAugmentedSeventh'),            Harmony.Music.Interval.enum.of('augmentedOctave'),            Harmony.Music.Interval.enum.of('doubleAugmentedOctave')        ];        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(prev && accord.isChordComplete() && prev.isChordComplete()) {                for(var i = 0; i < 4; ++i) {                    var error = false;                    var sounds = Math.abs(accord.pitch(i).asSounds() - prev.pitch(i).asSounds()) % 7;                    var semitones = Math.abs(accord.pitch(i).asSemitones() - prev.pitch(i).asSemitones()) % 11;                    var interval = new Harmony.Music.Interval(sounds, semitones);                    for(var j = 0; j < forbiddenIntervals.length && !error; ++j) {                        if(forbiddenIntervals[j].equals(interval)) {                            error = true;                        }                    }                    if(error) {                        that.addMessage(index, 'Niedozwolony skok o interwał zwiększony w ' + (i + 1) + '. głosie.');                    }                }            }        }    }),*/    // ?    new Rule('Utwór powinien zaczynać się od toniki.', function(context) {        var that = this;        var accord = context.accords[0];        var func = accord.func;        var index = accord.index;        if(!Harmony.Music.Func.enum.of('UN').equals(func)) {            if(!(func.type === 'T')) {                that.addMessage(index, 'Utwór nie zaczyna się od toniki.');            }        }    }),    // B    new Rule('Utwór powinien kończyć się na tonice.', function(context) {        var that = this;        var accord = context.accords[context.accords.length - 1];        var func = accord.func;        var index = accord.index;        if(!Harmony.Music.Func.enum.of('UN').equals(func)) {            if(!(func.type === 'T')) {                that.addMessage(index, 'Utwór nie kończy się na tonice.');            }        }    }),    // E    new Rule('Na mocnej części taktu powinna nastąpić zmiana funkcji harmonicznej.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(prev && accord.index.isStrong() && !Harmony.Music.Func.enum.of('UN').equals(accord.func) && !Harmony.Music.Func.enum.of('UN').equals(prev.func)) {                if(accord.func.type === prev.func.type) {                    that.addMessage(index, 'Nie nastąpiła zmiana funkcji harmonicznej na mocnej części taktu.');                }            }        }    }),    // S    new Rule('Akord w drugim przewrocie pełni rolę akordu przejściowego.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var accord = context.accords[i];            var index = accord.index;            if(!Harmony.Music.Func.enum.of('UN').equals(accord.func) && accord.index.isStrong() && accord.func.revert === 2) {                that.addMessage(index, 'Akord w drugim przewrocie pełni rolę akordu pomocniczego, dlatego nie może on wystąpić na mocnej części taktu.');            }        }    }),    // G    new Rule('Jeżeli w melodii nuta powtarza się powinna nastąpić zmiana funkcji harmonicznej.', function(context) {        var that = this;        for(var i = 0; i < context.accords.length; ++i) {            var prev = context.accords[i - 1];            var accord = context.accords[i];            var index = accord.index;            if(!accord.isContinuation() && prev && prev.pitch(0) && accord.pitch(0) && !Harmony.Music.Func.enum.of('UN').equals(accord.func) && !Harmony.Music.Func.enum.of('UN').equals(prev.func)) {                if(prev.pitch(0).equals(accord.pitch(0)) && accord.func.type === prev.func.type) {                    that.addMessage(index, 'Nie nastąpiła zmiana funkcji harmonicznej dla powtarzającej się nuty w melodii.');                }            }        }    }),    // C    new Rule('Każde odniesienie odśrodkowe musi przejść w dośrodkowe.', function(context) {        var that = this;        var vertex = graph.START;        var prev = undefined;        for(var i = 0; i < context.accords.length; ++i) {            var accord = context.accords[i];            var index = accord.index;            var family = accord.func.family;            if(family && (prev !== family) && !accord.isContinuation() && !Harmony.Music.Func.enum.of('UN').equals(accord.func)) {                if(!vertex.hasEdgeTo(family)) {                    that.addMessage(index, 'Nieprawidłowe następstwo akordów, oczekiwano następujących funkcji: ' + vertex.html());                    return;                }                vertex = vertex.getNextVertex(family);            }            prev = family;        }    })];    function check(score) {        var context = Context.build(score);        for(var i = 0; i < rules.length; ++i) {            if(rules[i].apply(context)) {                break;            }        }        return context.result();    }    Harmony.Rules = {        check : check,        rules : rules    };})(Harmony);